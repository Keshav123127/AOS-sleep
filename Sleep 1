Q.1) Take multiple files as Command Line Arguments and print their inode numbers and file types

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    struct stat fileStat;
    int i;

    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ...\n", argv[0]);
        exit(1);
    }

    for (i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) == -1) {
            perror("stat");
            continue;
        }

        printf("File: %s\n", argv[i]);
        printf("  Inode Number: %lu\n", fileStat.st_ino);

        // Check file type using macros
        if (S_ISREG(fileStat.st_mode))
            printf("  Type: Regular File\n");
        else if (S_ISDIR(fileStat.st_mode))
            printf("  Type: Directory\n");
        else if (S_ISCHR(fileStat.st_mode))
            printf("  Type: Character Device\n");
        else if (S_ISBLK(fileStat.st_mode))
            printf("  Type: Block Device\n");
        else if (S_ISFIFO(fileStat.st_mode))
            printf("  Type: FIFO (Named Pipe)\n");
        else if (S_ISLNK(fileStat.st_mode))
            printf("  Type: Symbolic Link\n");
        else if (S_ISSOCK(fileStat.st_mode))
            printf("  Type: Socket\n");
        else
            printf("  Type: Unknown\n");

        printf("\n");
    }

    return 0;
}


Q.2) Write a C program to send SIGALRM signal by child process to parent process and parent process 
make a provision to catch the signal and display alarm is fired.(Use Kill, fork, signal and sleep 
system call) 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

// Signal handler for parent
void sigalrm_handler(int signo) {
    if (signo == SIGALRM) {
        printf("Alarm is fired!\n");
    }
}

int main() {
    pid_t pid;

    // Register signal handler for SIGALRM in parent
    signal(SIGALRM, sigalrm_handler);

    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        sleep(2); // give parent time to set up handler
        printf("Child sending SIGALRM to parent (PID=%d)\n", getppid());
        kill(getppid(), SIGALRM); // send SIGALRM to parent
    } else {
        // Parent process
        printf("Parent waiting for signal...\n");

        // Parent waits for child to send the signal
        pause(); // suspend until signal is caught
        printf("Parent exiting.\n");
    }

    return 0;
}
