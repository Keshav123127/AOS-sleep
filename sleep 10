Q.1) Write a program that illustrates how to execute two commands concurrently with a pipe.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int fd[2];
    pid_t pid1, pid2;

    // Create a pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // First child process for command1 (producer)
    pid1 = fork();
    if (pid1 < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid1 == 0) {
        // ---- Child 1: Execute first command (ls -l) ----
        close(fd[0]);                // Close unused read end
        dup2(fd[1], STDOUT_FILENO);  // Redirect stdout to pipe write end
        close(fd[1]);

        execlp("ls", "ls", "-l", NULL);
        perror("execlp ls failed");
        exit(1);
    }

    // Second child process for command2 (consumer)
    pid2 = fork();
    if (pid2 < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid2 == 0) {
        // ---- Child 2: Execute second command (wc -l) ----
        close(fd[1]);                // Close unused write end
        dup2(fd[0], STDIN_FILENO);   // Redirect stdin to pipe read end
        close(fd[0]);

        execlp("wc", "wc", "-l", NULL);
        perror("execlp wc failed");
        exit(1);
    }

    // ---- Parent Process ----
    close(fd[0]);
    close(fd[1]);

    // Wait for both children to finish
    wait(NULL);
    wait(NULL);

    return 0;
}


Q.2) Generate parent process to write unnamed pipe and will write into it. Also generate child process
which will read from pipe

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    pid_t pid;
    char write_msg[] = "Hello from Parent!";
    char read_msg[100];

    // Create an unnamed pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // Create child process
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        close(fd[1]); // Close unused write end

        // Read message from pipe
        read(fd[0], read_msg, sizeof(read_msg));
        printf("Child received: %s\n", read_msg);

        close(fd[0]); // Close read end
    } 
    else {
        // ---- Parent Process ----
        close(fd[0]); // Close unused read end

        // Write message to pipe
        write(fd[1], write_msg, strlen(write_msg) + 1);
        printf("Parent sent: %s\n", write_msg);

        close(fd[1]); // Close write end
    }

    return 0;
}

