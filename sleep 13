Q.1) Write a C program that illustrates suspending and resuming processes using signals

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;

    // Create a child process
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        printf("Child (PID=%d) started. Running infinite loop...\n", getpid());
        int count = 0;
        while (1) {
            printf("Child counting: %d\n", count++);
            sleep(1);
        }
    } 
    else {
        // ---- Parent Process ----
        printf("Parent (PID=%d) will suspend child for 5 seconds...\n", getpid());
        sleep(3);  // Let child run a few counts

        // Suspend child
        kill(pid, SIGSTOP);
        printf("Child suspended.\n");
        sleep(5);

        // Resume child
        kill(pid, SIGCONT);
        printf("Child resumed.\n");

        // Let child run a few more counts
        sleep(5);

        // Terminate child
        kill(pid, SIGKILL);
        wait(NULL);
        printf("Child terminated.\n");
    }

    return 0;
}

Q.2) Write a C program that a string as an argument and return all the files that begins with that name
in the current directory. For example > ./a.out foo will return all file names that begins with foo
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <prefix>\n", argv[0]);
        return 1;
    }

    char *prefix = argv[1];
    DIR *dir;
    struct dirent *entry;

    // Open current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir failed");
        return 1;
    }

    printf("Files starting with '%s':\n", prefix);
    printf("---------------------------\n");

    while ((entry = readdir(dir)) != NULL) {
        // Skip "." and ".."
        if (entry->d_name[0] == '.')
            continue;

        // Check if filename starts with prefix
        if (strncmp(entry->d_name, prefix, strlen(prefix)) == 0) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
    return 0;
}

