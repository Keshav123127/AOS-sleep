Q.1) Display all the files from current directory whose size is greater that n Bytes Where n is accept
from user.
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <sys/stat.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    long n;

    // Accept size limit from user
    printf("Enter the minimum file size in bytes: ");
    scanf("%ld", &n);

    // Open current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir failed");
        return 1;
    }

    printf("Files larger than %ld bytes:\n", n);
    printf("--------------------------------\n");

    // Read directory entries
    while ((entry = readdir(dir)) != NULL) {
        // Skip "." and ".."
        if (entry->d_name[0] == '.')
            continue;

        // Get file stats
        if (stat(entry->d_name, &fileStat) == -1) {
            perror("stat failed");
            continue;
        

        // Check if regular file and size > n
        if (S_ISREG(fileStat.st_mode) && fileStat.st_size > n) {
            printf("%s\t%ld bytes\n", entry->d_name, fileStat.st_size);
        }
    }

    closedir(dir);
    return 0;
}

Q.2) Write a C program to find file properties such as inode number, number of hard link, File
permissions, File size, File access and modification time and so on of a given file using stat()
system call

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <time.h>
#include <pwd.h>
#include <grp.h>

void print_permissions(mode_t mode) {
    printf("Permissions: ");
    printf( (mode & S_IRUSR) ? "r" : "-");
    printf( (mode & S_IWUSR) ? "w" : "-");
    printf( (mode & S_IXUSR) ? "x" : "-");
    printf( (mode & S_IRGRP) ? "r" : "-");
    printf( (mode & S_IWGRP) ? "w" : "-");
    printf( (mode & S_IXGRP) ? "x" : "-");
    printf( (mode & S_IROTH) ? "r" : "-");
    printf( (mode & S_IWOTH) ? "w" : "-");
    printf( (mode & S_IXOTH) ? "x" : "-");
    printf("\n");
}

int main(int argc, char *argv[]) {
    struct stat fileStat;

    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    if (stat(argv[1], &fileStat) < 0) {
        perror("stat failed");
        return 1;
    }

    printf("File: %s\n", argv[1]);
    printf("Inode number: %ld\n", fileStat.st_ino);
    printf("Number of hard links: %ld\n", fileStat.st_nlink);
    printf("File size: %ld bytes\n", fileStat.st_size);

    print_permissions(fileStat.st_mode);

    printf("User ID (owner): %d (%s)\n", fileStat.st_uid, getpwuid(fileStat.st_uid)->pw_name);
    printf("Group ID: %d (%s)\n", fileStat.st_gid, getgrgid(fileStat.st_gid)->gr_name);

    printf("Last access time: %s", ctime(&fileStat.st_atime));
    printf("Last modification time: %s", ctime(&fileStat.st_mtime));
    printf("Last status change time: %s", ctime(&fileStat.st_ctime));

    return 0;
}
