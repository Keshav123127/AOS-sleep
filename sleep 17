Q.1) Read the current directory and display the name of the files, no of files in current directory
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    int file_count = 0;

    // Open current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir failed");
        exit(1);
    }

    printf("Files in current directory:\n");
    printf("---------------------------\n");

    // Read directory entries
    while ((entry = readdir(dir)) != NULL) {
        // Skip "." and ".."
        if (entry->d_name[0] == '.')
            continue;

        printf("%s\n", entry->d_name);
        file_count++;
    }

    closedir(dir);

    printf("---------------------------\n");
    printf("Total number of files: %d\n", file_count);

    return 0;
}


Q.2) Write a C program to implement the following unix/linux command (use fork, pipe and exec
system call). Your program should block the signal Ctrl-C and Ctrl-\ signal during the execution.
i. Ls –l | wc –l 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>

int main() {
    int fd[2];
    pid_t pid1, pid2;

    // Block Ctrl-C and Ctrl-\ signals
    signal(SIGINT, SIG_IGN);   // Ignore SIGINT
    signal(SIGQUIT, SIG_IGN);  // Ignore SIGQUIT

    // Create pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // Fork first child for "ls -l"
    pid1 = fork();
    if (pid1 < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid1 == 0) {
        // ---- First Child: ls -l ----
        close(fd[0]);              // Close unused read end
        dup2(fd[1], STDOUT_FILENO); // Redirect stdout to pipe write end
        close(fd[1]);

        execlp("ls", "ls", "-l", NULL);
        perror("execlp failed");
        exit(1);
    }

    // Fork second child for "wc -l"
    pid2 = fork();
    if (pid2 < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid2 == 0) {
        // ---- Second Child: wc -l ----
        close(fd[1]);               // Close unused write end
        dup2(fd[0], STDIN_FILENO);  // Redirect stdin to pipe read end
        close(fd[0]);

        execlp("wc", "wc", "-l", NULL);
        perror("execlp failed");
        exit(1);
    }

    // ---- Parent Process ----
    close(fd[0]);
    close(fd[1]);

    // Wait for both children to finish
    waitpid(pid1, NULL, 0);
    waitpid(pid2, NULL, 0);

    printf("Command execution completed.\n");

    return 0;
}
