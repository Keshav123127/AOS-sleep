Q.1) Write a C program to find whether a given file is present in current directory or not
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>

int main() {
    char filename[256];
    DIR *dir;
    struct dirent *entry;
    int found = 0;

    // Accept file name from user
    printf("Enter the file name to search: ");
    scanf("%s", filename);

    // Open current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir failed");
        exit(1);
    }

    // Read directory entries
    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, filename) == 0) {
            found = 1;
            break;
        }
    }

    closedir(dir);

    if (found)
        printf("File '%s' is present in the current directory.\n", filename);
    else
        printf("File '%s' is NOT present in the current directory.\n", filename);

    return 0;
}


Q.2) Write a C program to create an unnamed pipe. The child process will write following three
messages to pipe and parent process display it.
Message1 = “Hello World”
Message2 = “Hello SPPU”
Message3 = “Linux is Funny” 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int fd[2];
    pid_t pid;
    char buffer[100];

    // Create unnamed pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // Create child process
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        close(fd[0]);  // Close read end

        char *messages[] = {
            "Hello World",
            "Hello SPPU",
            "Linux is Funny"
        };

        for (int i = 0; i < 3; i++) {
            write(fd[1], messages[i], strlen(messages[i]) + 1); // +1 to include null terminator
            sleep(1); // Optional: simulate delay
        }

        close(fd[1]); // Close write end
        exit(0);
    } else {
        // ---- Parent Process ----
        close(fd[1]); // Close write end

        printf("Parent reading messages from child:\n");
        while (read(fd[0], buffer, sizeof(buffer)) > 0) {
            printf("%s\n", buffer);
        }

        close(fd[0]); // Close read end
        wait(NULL);   // Wait for child to terminate
    }

    return 0;
}
