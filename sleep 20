Q.1) Write a C program that illustrates suspending and resuming processes using signals

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        printf("Child process started with PID %d\n", getpid());
        while (1) {
            printf("Child is running...\n");
            sleep(1);
        }
    } else {
        // ---- Parent Process ----
        printf("Parent process PID: %d\n", getpid());

        sleep(3); // Let child run for 3 seconds
        printf("\nParent: Suspending child process...\n");
        kill(pid, SIGSTOP); // Suspend child

        sleep(5); // Wait while child is suspended
        printf("Parent: Resuming child process...\n");
        kill(pid, SIGCONT); // Resume child

        sleep(3); // Let child run again
        printf("Parent: Terminating child process...\n");
        kill(pid, SIGKILL); // Terminate child
        wait(NULL); // Wait for child to finish
        printf("Parent: Child terminated. Exiting.\n");
    }

    return 0;
}

Q.2) Write a C program to Identify the type (Directory, character device, Block device, Regular file,
FIFO or pipe, symbolic link or socket) of given file using stat() system call.

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <unistd.h>

void print_file_type(mode_t mode) {
    if (S_ISREG(mode))
        printf("Regular File\n");
    else if (S_ISDIR(mode))
        printf("Directory\n");
    else if (S_ISCHR(mode))
        printf("Character Device\n");
    else if (S_ISBLK(mode))
        printf("Block Device\n");
    else if (S_ISFIFO(mode))
        printf("FIFO / Pipe\n");
    else if (S_ISLNK(mode))
        printf("Symbolic Link\n");
    else if (S_ISSOCK(mode))
        printf("Socket\n");
    else
        printf("Unknown\n");
}

int main(int argc, char *argv[]) {
    struct stat fileStat;

    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    if (stat(argv[1], &fileStat) < 0) {
        perror("stat failed");
        return 1;
    }

    printf("File: %s\nType: ", argv[1]);
    print_file_type(fileStat.st_mode);

    return 0;
}
