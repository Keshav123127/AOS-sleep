Q.1) Read the current directory and display the name of the files, no of files in current directory

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;
    int file_count = 0;

    // Open current directory
    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir failed");
        exit(1);
    }

    printf("Files in current directory:\n");
    printf("---------------------------\n");

    // Read directory entries
    while ((entry = readdir(dir)) != NULL) {
        // Skip "." and ".."
        if (entry->d_name[0] == '.')
            continue;

        printf("%s\n", entry->d_name);
        file_count++;
    }

    closedir(dir);

    printf("---------------------------\n");
    printf("Total number of files: %d\n", file_count);

    return 0;
}

Q.2) Write a C program which receives file names as command line arguments and display those
filenames in ascending order according to their sizes. I) (e.g $ a.out a.txt b.txt c.txt,..)

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <string.h>

typedef struct {
    char name[256];
    off_t size;
} FileInfo;

// Comparison function for qsort
int compare(const void *a, const void *b) {
    FileInfo *f1 = (FileInfo *)a;
    FileInfo *f2 = (FileInfo *)b;
    if (f1->size < f2->size) return -1;
    else if (f1->size > f2->size) return 1;
    else return 0;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ...\n", argv[0]);
        return 1;
    }

    FileInfo *files = malloc((argc - 1) * sizeof(FileInfo));
    struct stat fileStat;

    for (int i = 1; i < argc; i++) {
        if (stat(argv[i], &fileStat) < 0) {
            perror(argv[i]);
            strcpy(files[i - 1].name, argv[i]);
            files[i - 1].size = 0;
        } else {
            strcpy(files[i - 1].name, argv[i]);
            files[i - 1].size = fileStat.st_size;
        }
    }

    // Sort files by size
    qsort(files, argc - 1, sizeof(FileInfo), compare);

    printf("Files in ascending order of size:\n");
    printf("---------------------------------\n");
    for (int i = 0; i < argc - 1; i++) {
        printf("%s\t(%ld bytes)\n", files[i].name, files[i].size);
    }

    free(files);
    return 0;
}


