Q.1) Write a C Program that demonstrates redirection of standard output to a file

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;

    // Open file "output.txt" for writing (create if not exists, truncate if exists)
    fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open failed");
        exit(1);
    }

    // Redirect standard output to the file
    if (dup2(fd, STDOUT_FILENO) < 0) {
        perror("dup2 failed");
        exit(1);
    }

    close(fd); // Close the original file descriptor

    // Now all printf outputs will go to "output.txt"
    printf("Hello World\n");
    printf("This output is redirected to a file.\n");
    printf("AOS Practical: Standard Output Redirection using dup2.\n");

    return 0;
}

Q.2) Write a C program that redirects standard output to a file output.txt. (use of dup and open system
call).

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;

    // Open (or create) output.txt with write permissions
    fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open failed");
        exit(1);
    }

    // Redirect standard output (stdout) to the file
    if (dup2(fd, STDOUT_FILENO) < 0) {
        perror("dup2 failed");
        exit(1);
    }

    close(fd); // Close original file descriptor

    // All printf statements now go to output.txt
    printf("Hello World\n");
    printf("This output is redirected to output.txt\n");
    printf("Using dup and open system calls\n");

    return 0;
}
