Q.1) Print the type of file and inode number where file name accepted through Command Line

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[])
{
    if (argc < 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        exit(1);
    }

    struct stat fileStat;

    // Get file information using stat()
    if (stat(argv[1], &fileStat) == -1) {
        perror("Error retrieving file information");
        exit(1);
    }

    // Print inode number
    printf("File: %s\n", argv[1]);
    printf("Inode Number: %lu\n", fileStat.st_ino);

    // Determine file type
    printf("File Type: ");
    if (S_ISREG(fileStat.st_mode))
        printf("Regular File\n");
    else if (S_ISDIR(fileStat.st_mode))
        printf("Directory\n");
    else if (S_ISLNK(fileStat.st_mode))
        printf("Symbolic Link\n");
    else if (S_ISCHR(fileStat.st_mode))
        printf("Character Device\n");
    else if (S_ISBLK(fileStat.st_mode))
        printf("Block Device\n");
    else if (S_ISFIFO(fileStat.st_mode))
        printf("FIFO (Named Pipe)\n");
    else if (S_ISSOCK(fileStat.st_mode))
        printf("Socket\n");
    else
        printf("Unknown Type\n");

    return 0;
}



Q.2) Write a C program which creates a child process to run linux/ unix command or any user defined
program. The parent process set the signal handler for death of child signal and Alarm signal. If
a child process does not complete its execution in 5 second then parent process kills child process.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t child_pid;

// Signal handler for child termination (SIGCHLD)
void handle_child(int sig) {
    int status;
    waitpid(child_pid, &status, 0);
    printf("\n[Parent] Child process terminated successfully.\n");
    exit(0);
}

// Signal handler for alarm signal (SIGALRM)
void handle_alarm(int sig) {
    printf("\n[Parent] Child process did not finish in 5 seconds. Killing child...\n");
    kill(child_pid, SIGKILL);
    printf("[Parent] Child process killed.\n");
    exit(0);
}

int main() {
    // Create child process
    child_pid = fork();

    if (child_pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (child_pid == 0) {
        // ----- CHILD PROCESS -----
        printf("[Child] Running command: sleep 10\n");
        execlp("sleep", "sleep", "10", NULL);  // Example: a long-running command
        perror("execlp failed");
        exit(1);
    } 
    else {
        // ----- PARENT PROCESS -----
        printf("[Parent] Child process created with PID: %d\n", child_pid);

        // Set signal handlers
        signal(SIGCHLD, handle_child);
        signal(SIGALRM, handle_alarm);

        // Set alarm for 5 seconds
        alarm(5);

        // Parent waits indefinitely for signals
        while (1) {
            pause();  // Wait for signal (SIGCHLD or SIGALRM)
        }
    }

    return 0;
}


