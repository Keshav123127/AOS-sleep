
Q.1) Write a C program to find whether a given files passed through command line arguments are
present in current directory or not.

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>

int main(int argc, char *argv[])
{
    if (argc < 2) {
        printf("Usage: %s <file1> <file2> ...\n", argv[0]);
        exit(1);
    }

    struct dirent *de;
    DIR *dr = opendir(".");

    if (dr == NULL) {
        perror("Could not open current directory");
        exit(1);
    }

    // Loop through each file name given in command line
    for (int i = 1; i < argc; i++) {
        int found = 0;
        rewinddir(dr);  // Reset directory pointer to start
        while ((de = readdir(dr)) != NULL) {
            if (strcmp(de->d_name, argv[i]) == 0) {
                found = 1;
                break;
            }
        }
        if (found)
            printf("File '%s' is PRESENT in the current directory.\n", argv[i]);
        else
            printf("File '%s' is NOT PRESENT in the current directory.\n", argv[i]);
    }

    closedir(dr);
    return 0;
}


Q.2) Write a C program which creates a child process and child process catches a signal SIGHUP,
SIGINT and SIGQUIT. The Parent process send a SIGHUP or SIGINT signal after every 3
seconds, at the end of 15 second parent send SIGQUIT signal to child and child terminates by
displaying message "My Papa has Killed me!!!‚Äù.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

pid_t pid;

// Child process signal handlers
void sighup_handler(int sig) {
    printf("Child received SIGHUP signal.\n");
}

void sigint_handler(int sig) {
    printf("Child received SIGINT signal.\n");
}

void sigquit_handler(int sig) {
    printf("My Papa has Killed me!!!\n");
    exit(0);
}

int main() {
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ----- CHILD PROCESS -----
        signal(SIGHUP, sighup_handler);
        signal(SIGINT, sigint_handler);
        signal(SIGQUIT, sigquit_handler);

        while (1) {
            pause(); // Wait for signals from parent
        }
