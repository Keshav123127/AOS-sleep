Q.1) Write a C Program that demonstrates redirection of standard output to a file
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;
    char *filename = "output.txt";

    // Create or open the file (with write permissions)
    fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("File open failed");
        exit(1);
    }

    // Duplicate file descriptor to standard output (stdout)
    if (dup2(fd, STDOUT_FILENO) < 0) {
        perror("dup2 failed");
        close(fd);
        exit(1);
    }

    close(fd);  // 'fd' no longer needed after redirection

    // From this point, printf output will go to the file
    printf("This line will be written into output.txt\n");
    printf("Standard output is now redirected to a file!\n");
    printf("AOS practical: Output redirection successful.\n");

    return 0;
}

Q.2) Implementthe following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int fd[2];
    pid_t pid;

    // Create a pipe
    if (pipe(fd) == -1) {
        perror("Pipe failed");
        exit(1);
    }

    // Create a child process
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        // Redirect stdout to pipe's write end
        close(fd[0]);                // Close unused read end
        dup2(fd[1], STDOUT_FILENO);  // stdout -> write end of pipe
        close(fd[1]);

        // Execute 'ls -l'
        execlp("ls", "ls", "-l", NULL);
        perror("execlp failed");
        exit(1);
    } else {
        // ---- Parent Process ----
        // Redirect stdin to pipe's read end
        close(fd[1]);                // Close unused write end
        dup2(fd[0], STDIN_FILENO);   // stdin -> read end of pipe
        close(fd[0]);

        // Execute 'wc -l'
        execlp("wc", "wc", "-l", NULL);
        perror("execlp failed");
        exit(1);
    }

    return 0;
}


