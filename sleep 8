Q.1) Write a C program that redirects standard output to a file output.txt. (use of dup and open system
call). 

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;

    // Open (or create) output.txt file with write permissions
    fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open failed");
        exit(1);
    }

    // Duplicate the file descriptor to stdout (1)
    if (dup(fd) != STDOUT_FILENO) {
        // Close original fd if duplication fails
        perror("dup failed");
        close(fd);
        exit(1);
    }

    // Close the original file descriptor as it's no longer needed
    close(fd);

    // Now printf will write to output.txt instead of the terminal
    printf("This output is redirected to output.txt\n");
    printf("AOS Practical: Output redirection using dup and open system calls.\n");

    return 0;
}


Q.2) Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int fd[2];
    pid_t pid;

    // Create a pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // Create child process
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        // Redirect stdout to write end of pipe
        close(fd[0]);                // Close unused read end
        dup2(fd[1], STDOUT_FILENO);  // STDOUT -> pipe write end
        close(fd[1]);

        // Execute "ls -l"
        execlp("ls", "ls", "-l", NULL);
        perror("execlp ls failed");
        exit(1);
    } else {
        // ---- Parent Process ----
        // Redirect stdin to read end of pipe
        close(fd[1]);                // Close unused write end
        dup2(fd[0], STDIN_FILENO);   // STDIN -> pipe read end
        close(fd[0]);

        // Execute "wc -l"
        execlp("wc", "wc", "-l", NULL);
        perror("execlp wc failed");
        exit(1);
    }

    return 0;
}
