Q.1) Generate parent process to write unnamed pipe and will read from it

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2];
    pid_t pid;
    char write_msg[] = "Hello from Parent through Pipe!";
    char read_msg[100];

    // Create the pipe
    if (pipe(fd) == -1) {
        perror("pipe failed");
        exit(1);
    }

    // Create child process
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // ---- Child Process ----
        close(fd[1]); // Close write end (child will only read)
        read(fd[0], read_msg, sizeof(read_msg));
        printf("Child received message: %s\n", read_msg);
        close(fd[0]);
    } 
    else {
        // ---- Parent Process ----
        close(fd[0]); // Close read end (parent will write first)
        write(fd[1], write_msg, strlen(write_msg) + 1);
        printf("Parent sent message: %s\n", write_msg);
        close(fd[1]);
    }

    return 0;
}


Q.2) Write a C program to Identify the type (Directory, character device, Block device, Regular file,
FIFO or pipe, symbolic link or socket) of given file using stat() system call.

#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>

int main(int argc, char *argv[]) {
    struct stat fileStat;

    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        exit(1);
    }

    // Get file information
    if (stat(argv[1], &fileStat) < 0) {
        perror("stat failed");
        exit(1);
    }

    printf("File: %s\n", argv[1]);

    // Check the type of file
    if (S_ISREG(fileStat.st_mode))
        printf("Type: Regular File\n");
    else if (S_ISDIR(fileStat.st_mode))
        printf("Type: Directory\n");
    else if (S_ISCHR(fileStat.st_mode))
        printf("Type: Character Device\n");
    else if (S_ISBLK(fileStat.st_mode))
        printf("Type: Block Device\n");
    else if (S_ISFIFO(fileStat.st_mode))
        printf("Type: FIFO (Named Pipe)\n");
    else if (S_ISLNK(fileStat.st_mode))
        printf("Type: Symbolic Link\n");
    else if (S_ISSOCK(fileStat.st_mode))
        printf("Type: Socket\n");
    else
        printf("Type: Unknown\n");

    return 0;
}

